{
  "info": {
    "_postman_id": "3146a49e-fc5d-4816-be69-d99bfed9c572",
    "name": "API Övningar - Shop API",
    "description": "Denna collection innehåller testfall för hela Shop API‑et med fokus på funktionalitet, felhantering, rollbaserad åtkomst, samt CRUD‑operationer för produkter, kategorier, användare och orders.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "43555434",
    "_collection_link": "https://editorjakupi-3407772.postman.co/workspace/14b19aa0-2f64-4c6f-85cd-1cedf06dfc18/collection/43555434-3146a49e-fc5d-4816-be69-d99bfed9c572?action=share&source=collection_link&creator=43555434"
  },
  "item": [
    {
      "name": "Produkter",
      "item": [
        {
          "name": "GetProducts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statuskod är 200\", () => {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Svaret är en array\", () => {",
                  "  pm.expect(pm.response.json()).to.be.an(\"array\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          }
        },
        {
          "name": "GetSingleProductByID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products",
                "{{product_id}}"
              ]
            }
          }
        },
        {
          "name": "CreateProductConnectToNewCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let response;",
                  "try {",
                  "    response = pm.response.json();",
                  "} catch(e) {",
                  "    console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "    response = {};",
                  "}",
                  "if (response.insertId) {",
                  "  pm.environment.set(\"product_id\", response.insertId);",
                  "}",
                  "pm.test(\"Statuskod är 200 eller 201\", () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "pm.test(\"Produkt-ID sparat\", () => {",
                  "  pm.expect(pm.environment.get(\"product_id\")).to.not.be.undefined;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Name\": \"strumpor\",\r\n  \"Price\": 100,\r\n  \"CategoryId\": {{category_id}}\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          }
        },
        {
          "name": "CreateProductConnectToCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Detta request förväntas misslyckas (401) då admin behörighet krävs",
                  "pm.test(\"Statuskod är 401\", () => {",
                  "  pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Name\": \"GForceMouse\",\r\n  \"Price\": 999,\r\n  \"CategoryId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          }
        },
        {
          "name": "UpdateProductPrice",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Price\": 150\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products",
                "{{product_id}}"
              ]
            }
          }
        },
        {
          "name": "DeleteProduct",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products",
                "{{product_id}}"
              ]
            }
          }
        }
      ],
      "description": "Denna mapp innehåller requestar för att skapa, hämta, uppdatera och radera produkter. OBS! Kör CreateNewCategory först så att {{category_id}} sätts, annars kommer vissa endpoints att misslyckas."
    },
    {
      "name": "Kategorier",
      "item": [
        {
          "name": "GetCategories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statuskod är 200\", () => {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Svaret är en array\", () => {",
                  "  pm.expect(pm.response.json()).to.be.an(\"array\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "categories"
              ]
            }
          }
        },
        {
          "name": "CreateNewCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let response;",
                  "try {",
                  "    response = pm.response.json();",
                  "} catch(e) {",
                  "    console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "    response = {};",
                  "}",
                  "if (response.insertId) {",
                  "  pm.environment.set(\"category_id\", response.insertId);",
                  "}",
                  "pm.test(\"Kategori-ID sparat\", () => {",
                  "  pm.expect(pm.environment.get(\"category_id\")).to.not.be.undefined;",
                  "});",
                  "pm.test(\"Statuskod är 200 eller 201\", () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Name\": \"NoNameCategory\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "categories"
              ]
            }
          }
        }
      ],
      "description": "Här testas skapande, uppdatering och radering av kategorier. OBS! Se till att {{category_id}} sätts via CreateNewCategory."
    },
    {
      "name": "Användare",
      "item": [
        {
          "name": "CreateUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let response;",
                  "try {",
                  "  response = pm.response.json();",
                  "} catch(e) {",
                  "  console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "  response = {};",
                  "}",
                  "if (response.insertId) {",
                  "  pm.environment.set(\"user_id\", response.insertId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Username\": \"nyanvandare\",\r\n  \"Email\": \"nyanvandare@example.com\",\r\n  \"Password\": \"lösenord\",\r\n  \"RoleId\": 2\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users"
              ]
            }
          }
        },
        {
          "name": "LoginUser",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Email\": \"nyanvandare@example.com\",\r\n  \"Password\": \"lösenord\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "login"
              ]
            }
          }
        }
      ],
      "description": "Requestarna här testar användarhantering med fokus på åtkomstkontroll, inloggning och radering. OBS! Kör CreateUser innan du testar uppdatering/radering."
    },
    {
      "name": "Inloggning & Sessions",
      "item": [
        {
          "name": "LoginAdmin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Email\": \"admin@admin.com\",\r\n  \"Password\": \"admin123\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "login"
              ]
            }
          }
        },
        {
          "name": "DeleteLogIn",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "login"
              ]
            }
          }
        }
      ],
      "description": "Dessa request hanterar inloggning för admin och utloggning (session radering)."
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "CreateOrder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let response;",
                  "try {",
                  "    response = pm.response.json();",
                  "} catch(e) {",
                  "    console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "    response = {};",
                  "}",
                  "if (response.insertId) {",
                  "  pm.environment.set(\"order_id\", response.insertId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"ProductId\": \"{{product_id}}\",\r\n  \"Quantity\": 2\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "orders"
              ]
            }
          }
        },
        {
          "name": "GetUserOrders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/user/{{user_id}}/orders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "user",
                "{{user_id}}",
                "orders"
              ]
            }
          }
        },
        {
          "name": "GetSpecificUserOrder",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/user/{{user_id}}/orders/{{order_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "user",
                "{{user_id}}",
                "orders",
                "{{order_id}}"
              ]
            }
          }
        }
      ],
      "description": "Requestarna här hanterar skapande och hämtning av ordrar. OBS! Se till att {{product_id}}, {{user_id}} och {{order_id}} är satta."
    },
    {
      "name": "Full API Kartläggning",
      "item": [
        {
          "name": "UpdateCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statuskod är 200\", () => {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "let response;",
                  "try {",
                  "    response = pm.response.json();",
                  "} catch(e) {",
                  "    console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "    response = {};",
                  "}",
                  "pm.test(\"Kategorin uppdaterades\", () => {",
                  "  pm.expect(response.Name).to.eql(\"Uppdaterad Kategori\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Name\": \"Uppdaterad Kategori\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "categories",
                "{{category_id}}"
              ]
            },
            "description": "Uppdaterar namnet på en befintlig kategori."
          }
        },
        {
          "name": "DeleteCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statuskod är 200 eller 404\", () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "let response;",
                  "try {",
                  "    response = pm.response.json();",
                  "} catch(e) {",
                  "    console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "    response = {};",
                  "}",
                  "pm.test(\"Svarsmeddelande innehåller 'deleted'\", () => {",
                  "  pm.expect(response.message || \"\").to.include(\"deleted\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "categories",
                "{{category_id}}"
              ]
            },
            "description": "Raderar en kategori baserat på det sparade ID:t."
          }
        },
        {
          "name": "UpdateUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statuskod är 200\", () => {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "let response;",
                  "try {",
                  "    response = pm.response.json();",
                  "} catch(e) {",
                  "    console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "    response = {};",
                  "}",
                  "pm.test(\"Användarnamn uppdaterat\", () => {",
                  "  pm.expect(response.Username).to.eql(\"UppdateradAnvändare\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Username\": \"UppdateradAnvändare\",\r\n  \"Email\": \"nyanvandare@example.com\",\r\n  \"Password\": \"lösenord\",\r\n  \"RoleId\": 2\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}"
              ]
            },
            "description": "Uppdaterar en användares profilinformation."
          }
        },
        {
          "name": "DeleteUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Statuskod är 200 eller 404\", () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "pm.test(\"Svaret innehåller meddelande vid radering\", () => {",
                  "  let responseText = pm.response.text();",
                  "  pm.expect(responseText).to.include(\"deleted\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{user_id}}"
              ]
            },
            "description": "Raderar en användare. OBS! Kräver admin-behörighet."
          }
        },
        {
          "name": "TestWrongData",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let response;",
                  "try {",
                  "  response = pm.response.json();",
                  "} catch(e) {",
                  "  console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "  response = null;",
                  "}",
                  "pm.test(\"Statuskod är 400\", () => {",
                  "  pm.response.to.have.status(400);",
                  "});",
                  "if (response) {",
                  "  pm.test(\"Felmeddelande existerar\", () => {",
                  "    pm.expect(response.error || \"\").to.not.be.empty;",
                  "  });",
                  "} else {",
                  "  console.log('Ingen JSON att kontrollera felmeddelande för');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"Name\": \"\",\r\n  \"Price\": -50,\r\n  \"CategoryId\": {{category_id}}\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "products"
              ]
            },
            "description": "Testar API:ets validering genom att skicka felaktiga data."
          }
        },
        {
          "name": "LimitedAccess",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let response;",
                  "try {",
                  "  response = pm.response.json();",
                  "} catch(e) {",
                  "  console.error('Svar kunde inte tolkas som JSON:', pm.response.text());",
                  "  response = null;",
                  "}",
                  "pm.test(\"Statuskod är 401 eller 403\", () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
                  "});",
                  "if (response) {",
                  "  pm.test(\"Felmeddelande indikerar otillräckliga rättigheter\", () => {",
                  "    pm.expect(response.error || \"\").to.include(\"Unauthorized\");",
                  "  });",
                  "} else {",
                  "  console.log('Ingen JSON att kontrollera felmeddelande för LimitedAccess');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users"
              ]
            },
            "description": "Testar att en vanlig användare inte har åtkomst till admin-skyddade endpoints."
          }
        }
      ],
      "description": "Denna mapp innehåller egna testflöden och requestar för att kartlägga det kompletta API‑et. OBS! Kör requests i rätt ordning för att variabler ska sättas."
    }
  ]
}
